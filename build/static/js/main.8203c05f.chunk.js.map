{"version":3,"sources":["components/Editor.js","components/Client.js","components/Header.js","components/Filter.js","components/Clients.js","components/AutoComplete.js","components/Updates.js","components/AddClient.js","components/Actions.js","components/Badge.js","components/NewClients.js","components/Emails.js","components/OutstandingClients.js","components/BestSellerCountry.js","components/Badges.js","components/TopEmployees.js","components/SalesBy.js","components/SalesSince.js","components/Charts.js","components/Analytics.js","Main.js","serviceWorker.js","js/clients.js","index.js"],"names":["Editor","observer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","setState","name","client","split","surname","country","closeOnBackground","e","target","className","hideModal","stopPropagation","edit","state","update","defineProperty","id","value","react_default","a","createElement","style","display","onClick","type","onChange","Component","Client","inject","allStores","clients","editClient","showModal","console","log","getFirstName","getSurName","getSold","sold","index","min","max","Date","firstContact","toLocaleString","month","day","year","emailType","owner","components_Editor","Header","Filter","applyFilter","change","sFilter","filter","genSFilter","map","f","toLowerCase","Clients","back","start","end","populateDisplayed","forward","filteredClients","length","loadClients","displayedClients","c","i","components_Client","key","populateClients","components_Filter","components_Header","AutoComplete","getMatches","matches","arr","inp","splice","toUpperCase","includes","push","show","hide","select","temp","currentTarget","innerText","validate","check","validatekey","keyCode","_this2","onKeyDown","onFocus","placeholder","visibility","Updates","populateOwners","keys","owners","o","selected","emailTypes","transfer","newOwner","send","newEmailType","switchSale","AddClient","addNewClient","addNew","firstName","surName","Action","validateClient","clientName","selectClient","components_AutoComplete","components_Updates","components_AddClient","Badge","src","NewClients","counter","newClientsCounter","genDesc","concat","components_Badge","Emails","emailsSent","OutStandingClients","outStandingClients","BestSeller","countries","bestSeller","n","_i","Badges","components_NewClients","components_Emails","OutstandingClients","BestSellerCountry","TopEmployees","calcTop3","bestSellers","objectSpread","names","sales","ResponsiveContainer","width","height","BarChart","data","layout","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","YAxis","dataKey","Tooltip","Legend","Bar","fill","SalesBy","infoBasedDataGen","info","types","generateFilter","k","calcDataBySales","current","emailTypeSales","SalesSince","calcData","dataobj","today","startingDate","setDate","getDate","dates","getTime","sort","b","date","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","err","return","_arr","calcDate","LineChart","Line","stroke","activeDot","r","Charts","components_TopEmployees","components_SalesBy","components_SalesSince","Analytics","components_Badges","components_Charts","Main","BrowserRouter","Link","to","Route","exact","path","component","Boolean","window","location","hostname","match","observable","action","_callee","isClientsComponent","isActionComponent","isAnalyticsComponent","regenerator_default","wrap","_context","prev","axios","get","sent","calculateOwners","calculateEmailTypes","calcNewClients","calcEmailsSent","calcOutStanding","calcCountrySales","calcEmailTypeSales","stop","category","input","_this3","_this4","_this5","currentMonth","getMonth","_this6","_this7","_this8","_this9","_this10","_this11","_callee2","_context2","_this12","indexOf","post","_callee3","_context3","_this13","_callee4","newBool","_context4","t0","_this14","abrupt","_callee5","changes","_context5","_this15","_callee6","newClient","_context6","email","_this16","ReactDOM","render","index_module","src_Main","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8203c05f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\n@observer\r\nclass Editor extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: \"\",\r\n            surname: \"\",\r\n            country: \"\"\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.setState(\r\n            {\r\n                name: this.props.client.name.split(\" \")[0],\r\n                surname: this.props.client.name.split(\" \")[1],\r\n                country: this.props.client.country\r\n            })\r\n    }\r\n\r\n    closeOnBackground = (e) => {\r\n        if (e.target.className === 'modal') {\r\n            this.props.hideModal(e);\r\n        }\r\n        e.stopPropagation()\r\n    }\r\n\r\n    edit = (e) => {\r\n        this.props.edit(this.state.name, this.state.surname, this.state.country);\r\n        this.props.hideModal(e);\r\n        e.stopPropagation()\r\n    }\r\n\r\n    update = (e) => {\r\n        this.setState({ [e.target.id]: e.target.value })\r\n    }\r\n\r\n    hideModal = (e) => {\r\n        this.props.hideModal(e);\r\n        e.stopPropagation()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <span>\r\n                <div className=\"modal\" style={{ display: this.props.display }} onClick={this.closeOnBackground}>\r\n                    <div className=\"form-group\">\r\n                        <span className=\"modal-close\" onClick={this.hideModal}>x</span>\r\n                        <form>\r\n                            <div className=\"form-input\"><span>Name:</span><input id=\"name\" type=\"text\" value={this.state.name} onChange={this.update} /></div>\r\n                            <div className=\"form-input\"><span>Surname:</span><input id=\"surname\" type=\"text\" value={this.state.surname} onChange={this.update} /></div>\r\n                            <div className=\"form-input\"><span>Country:</span><input id=\"country\" type=\"text\" value={this.state.country} onChange={this.update} /></div>\r\n                        </form>\r\n                        <button className=\"update-btn\" onClick={this.edit}>Update</button>\r\n                    </div>\r\n                </div>\r\n            </span>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Editor;\r\n","import React, { Component } from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport Editor from './Editor'\r\n@inject(allStores => ({\r\n    edit: allStores.clients.editClient\r\n}))\r\n@observer\r\nclass Client extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            display: 'none',\r\n        }\r\n    }\r\n\r\n    showModal = () => {\r\n        this.setState({ display: 'block' }, () => {\r\n            console.log(this.state.display)\r\n        })\r\n    }\r\n\r\n    hideModal = () => {\r\n        this.setState({ display: 'none' }, () => {\r\n            console.log(this.state.display)\r\n        })\r\n    }\r\n\r\n    getFirstName = () => {\r\n        return this.props.client.name.split(\" \")[0]\r\n    }\r\n\r\n    getSurName = () => {\r\n        return this.props.client.name.split(\" \")[1]\r\n    }\r\n\r\n    getSold = () => {\r\n        if (this.props.client.sold) {\r\n            return \"Sold\"\r\n        }\r\n        return \"Not Sold\"\r\n    }\r\n\r\n    edit = (name, surname, country) => {\r\n        this.props.edit(this.props.index, { name: name + \" \" + surname, country: country }, this.props.min, this.props.max)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <tr onClick={this.showModal}>\r\n                <td>{this.getFirstName()}</td>\r\n                <td>{this.getSurName()}</td>\r\n                <td>{this.props.client.country}</td>\r\n                <td>{new Date(this.props.client.firstContact).toLocaleString('en-us', { month: '2-digit', day: '2-digit', year: 'numeric' })}</td>\r\n                <td>{this.props.client.emailType}</td>\r\n                <td>{this.getSold()}</td>\r\n                <td>{this.props.client.owner}</td>\r\n                <td><Editor showModal={this.showModal} hideModal={this.hideModal} display={this.state.display} client={this.props.client} edit={this.edit} /></td>\r\n            </tr>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Client;","import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n            <thead className=\"header\">\r\n                <tr>\r\n                    <th>Name</th>\r\n                    <th>Surname</th>\r\n                    <th>Country</th>\r\n                    <th>First Contact</th>\r\n                    <th>Email</th>\r\n                    <th>Sold</th>\r\n                    <th>Owner</th>\r\n                </tr>\r\n            </thead>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\nimport { observer, inject } from 'mobx-react';\r\n@inject(allStores => ({\r\n    applyFilter: allStores.clients.applyFilter\r\n}))\r\n@observer\r\nclass Filter extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            filter: \"\",\r\n            sFilter: \"name\",\r\n        }\r\n    }\r\n\r\n    change = (e) => {\r\n        debugger;\r\n        this.setState({ [e.target.id]: e.target.value }, ()=>{\r\n            this.props.applyFilter(this.state.sFilter, this.state.filter);\r\n            this.props.filter();\r\n        });\r\n    }\r\n\r\n    genSFilter = () => {\r\n        let arr = [\"Name\", \"Sold\", \"Email\", \"Owner\", \"Country\"];\r\n        return arr.map(f => {\r\n            return <option value={f.toLowerCase()}>{f}</option>\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"filter\">\r\n                <input id=\"filter\" type=\"text\" onChange={this.change} value={this.state.filter} />\r\n                <select id=\"sFilter\" onChange={this.change}>\r\n                    {this.genSFilter()}\r\n                </select>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Filter;","import React, { Component } from 'react';\r\nimport Client from './Client'\r\nimport Header from './Header'\r\nimport Filter from './Filter'\r\nimport { observer, inject } from 'mobx-react';\r\n\r\n@inject(\"clients\")\r\n@observer\r\nclass Clients extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            start: 0,\r\n            end: 20,\r\n        }\r\n    }\r\n\r\n    back = () => {\r\n        if (this.state.start !== 0) {\r\n            this.setState({ start: this.state.start - 20, end: this.state.end - 20 }, () => {\r\n                this.props.clients.populateDisplayed(this.state.start, this.state.end);\r\n            })\r\n        }\r\n    }\r\n\r\n    forward = () => {\r\n        if (this.state.end < this.props.clients.filteredClients.length) {\r\n            this.setState({ start: this.state.start + 20, end: this.state.end + 20 }, () => {\r\n                this.props.clients.populateDisplayed(this.state.start, this.state.end);\r\n            })\r\n        }\r\n    }\r\n\r\n    filter = () => {\r\n        this.setState({ start: 0, end: 20 }, () => {\r\n            this.props.clients.populateDisplayed(this.state.start, this.state.end);\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.clients.populateClients(this.state.start, this.state.end, true);\r\n    }\r\n\r\n    loadClients = () => {\r\n        return this.props.clients.displayedClients.map((c, i) => {\r\n            return <Client min={this.state.start} max={this.state.end} key={c.id} client={c} index={i + this.state.start} />\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Clients\">\r\n                <Filter filter={this.filter} />\r\n                <div className='pagination'>\r\n                    <input type='button' value='<' onClick={this.back} />\r\n                    <span>{this.state.start + '-' + (this.state.end - 1)}</span>\r\n                    <input type='button' value='>' onClick={this.forward} />\r\n                </div>\r\n                <table className=\"clientsTable\">\r\n                    <Header />\r\n                    <tbody>\r\n                        {this.loadClients()}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Clients;\r\n","import React, { Component } from 'react';\r\nimport { inject } from 'mobx-react';\r\n@inject('clients')\r\nclass AutoComplete extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            arr: [],\r\n            inp: \"\",\r\n            show: false,\r\n            matches: [],\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ arr: this.props.clients.clients.map(c => c.name) })\r\n    }\r\n\r\n    change = (e) => {\r\n        this.setState({ [e.target.id]: e.target.value }, this.getMatches())\r\n    }\r\n\r\n    getMatches = () => {\r\n        let matches = [];\r\n        this.state.arr.map(i => {\r\n            if (this.state.inp === i) {\r\n                matches.splice(0);\r\n                return null\r\n            }\r\n            if (i.toUpperCase().includes(this.state.inp.toUpperCase())) {\r\n                matches.push(i)\r\n                return i\r\n            }\r\n            return null\r\n        })\r\n\r\n        this.setState({ matches })\r\n    }\r\n\r\n    show = () => {\r\n        this.setState({ show: true });\r\n    }\r\n\r\n    hide = () => {\r\n        this.setState({ show: false })\r\n    }\r\n\r\n    select = (e) => {\r\n        let temp = e.currentTarget.innerText\r\n        this.setState({ inp: temp }, () => {\r\n            if (this.props.validate(temp)) this.hide()\r\n        })\r\n    }\r\n\r\n    check = () => {\r\n        if (this.props.validate(this.state.inp)) {\r\n            this.hide()\r\n        }\r\n    }\r\n\r\n    validatekey = (e) => {\r\n        if(e.keyCode === 13) {\r\n            if(this.props.validate(this.state.matches[0])) {\r\n                this.setState({ inp: this.state.matches[0] })\r\n                this.hide();\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"autoComplete\">\r\n                <input onKeyDown={this.validatekey} onFocus={this.show} id=\"inp\" type=\"text\" placeholder=\"Client Name\" value={this.state.inp} onChange={this.change} />\r\n                <ul style={(this.state.show) ? { \"visibility\": \"visible\" } : { \"visibility\": \"hidden\" }} className=\"auto-completer\">\r\n                    {this.state.matches.map(i => {\r\n                        return (\r\n                            <li onClick={this.select} key={i}>\r\n                                {i}\r\n                            </li>\r\n                        )\r\n                    })}\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AutoComplete;","import React, { Component } from 'react';\r\nimport { observer, inject } from 'mobx-react';\r\n@inject('clients')\r\n@observer\r\nclass Updates extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            newOwner: \"\",\r\n            newEmailType: \"\",\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.clients.client) {\r\n            this.setState({ newOwner: this.props.clients.client.owner, newEmailType: this.props.clients.client.emailType });\r\n        }\r\n    }\r\n\r\n    populateOwners = () => {\r\n        let owners = Object.keys(this.props.clients.owners);\r\n        return owners.map(o => {\r\n            if (this.props.clients.client.owner === o) {\r\n                return (\r\n                    <option selected value={o}>{o}</option>\r\n                )\r\n            } else {\r\n                return (\r\n                    <option value={o}>{o}</option>\r\n                )\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    emailTypes = () => {\r\n        let emails = Object.keys(this.props.clients.emailTypes);\r\n        return emails.map(e => {\r\n            if (this.props.clients.client.emailType === e) {\r\n                return (\r\n                    <option selected value={e}>{e}</option>\r\n                )\r\n            } else {\r\n                return (\r\n                    <option value={e}>{e}</option>\r\n                )\r\n            }\r\n        })\r\n    }\r\n\r\n    change = (e) => {\r\n        this.setState({ [e.target.id]: e.target.value });\r\n    }\r\n\r\n    transfer = () => {\r\n        this.props.clients.transfer(this.state.newOwner);\r\n    }\r\n\r\n    send = () => {\r\n        this.props.clients.send(this.state.newEmailType)\r\n    }\r\n\r\n    switchSale = () => {\r\n        this.props.clients.switchSale()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"updates\">\r\n                <div>\r\n                    <span>Transfer ownsership to</span>\r\n                    <select id=\"newOwner\" onChange={this.change}>\r\n                        {this.populateOwners()}\r\n                    </select>\r\n                    <div><span onClick={this.transfer} >TRANSFER</span></div>\r\n                </div>\r\n                <div>\r\n                    <span>Send email</span>\r\n                    <select id=\"newEmailType\" onChange={this.change}>\r\n                        {this.emailTypes()}\r\n                    </select>\r\n                    <div><span onClick={this.send} >SEND</span></div>\r\n                </div>\r\n                <div>\r\n                    <span>Declare sale!</span>\r\n                    <div><span onClick={this.switchSale} >DECLARE</span></div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Updates;\r\n","import React, { Component } from 'react';\r\nimport { observer, inject } from 'mobx-react';\r\n@inject(allStores => ({\r\n    addNewClient : allStores.clients.addNewClient,\r\n    owners : allStores.clients.owners,\r\n}))\r\n@observer\r\nclass AddClient extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            firstName: \"\",\r\n            surName: \"\",\r\n            country: \"\",\r\n            owner: \"\"\r\n        }\r\n    }\r\n\r\n    populateOwners = () => {\r\n        let owners = Object.keys(this.props.owners);\r\n        return owners.map(o => {\r\n            return (\r\n                <option value={o}>{o}</option>\r\n            )\r\n        })\r\n    }\r\n\r\n    change = (e) => {\r\n        this.setState({ [e.target.id]: e.target.value });\r\n    }\r\n\r\n    addNew = () => {\r\n        if(this.state.firstName === \"\" || this.state.surName === \"\" || this.state.country === \"\" || this.state.owner === \"\") {\r\n            console.log('one or more fields are empty')\r\n            return\r\n        }\r\n        this.props.addNewClient(this.state.firstName, this.state.surName, this.state.country, this.state.owner)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"add-client\">\r\n                <div>\r\n                    <span>First name: </span>\r\n                    <input id=\"firstName\" type=\"text\" onChange={this.change} value={this.state.firstName} />\r\n                </div>\r\n                <div>\r\n                    <span>Surname: </span>\r\n                    <input id=\"surName\" type=\"text\" onChange={this.change} value={this.state.surName} />\r\n                </div>\r\n                <div>\r\n                    <span>Country: </span>\r\n                    <input id=\"country\" type=\"text\" onChange={this.change} value={this.state.country} />\r\n                </div>\r\n                <div>\r\n                    <span>Owner: </span>\r\n                    <select id=\"owner\" onChange={this.change}>\r\n                        {this.populateOwners()}\r\n                    </select>\r\n                </div>\r\n                <button className=\"add-btn\" onClick={this.addNew}>Add New Client</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddClient;\r\n","import React, { Component } from 'react';\r\nimport { observer, inject } from 'mobx-react';\r\nimport AutoComplete from './AutoComplete';\r\nimport Updates from './Updates'\r\nimport AddClient from './AddClient'\r\n@inject('clients')\r\n@observer\r\nclass Action extends Component {\r\n\r\n  componentDidMount() {\r\n    this.props.clients.populateClients(null, null, false, true);\r\n  }\r\n\r\n  validateClient = (clientName) => {\r\n    this.props.clients.clients.map(client => {\r\n      if (client.name === clientName) {\r\n        this.props.clients.selectClient(client);\r\n      }\r\n      return null;\r\n    })\r\n    if (!this.props.clients.client.name) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Action\">\r\n        <div className=\"update-fields\">\r\n          <h3>UPDATE</h3>\r\n          <span>Client:</span>\r\n          <AutoComplete validate={this.validateClient} />\r\n          <Updates />\r\n          <div className=\"seperation\">\r\n            <hr />\r\n            <h3>ADD CLIENT</h3>\r\n          </div>\r\n          <AddClient />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Action;\r\n","import React, { Component } from 'react';\r\n\r\nclass Badge extends Component {\r\n  render() {\r\n    return (\r\n      <img src={this.props.src} className=\"badge\" id={this.props.id} />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Badge;","import React, { Component } from 'react';\r\nimport Badge from './Badge'\r\nimport { inject, observer } from 'mobx-react';\r\n@inject(allStores => ({\r\n  counter: allStores.clients.newClientsCounter\r\n}))\r\n@observer\r\nclass NewClients extends Component {\r\n\r\n  genDesc = () => {\r\n    let month = new Date();\r\n    month = month.toLocaleString('en-us', { month: 'long' });\r\n    return `New ${month} Clients`\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"new-clients\">\r\n        <Badge src=\"https://st2.depositphotos.com/3538103/5411/v/450/depositphotos_54116429-stock-illustration-infographic-chart-icon.jpg\" />\r\n        <span className=\"number\" >{this.props.counter}</span><br />\r\n        <span className=\"description-of-number\">{this.genDesc()}</span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewClients;\r\n","import React, { Component } from 'react';\r\nimport { observer, inject } from 'mobx-react';\r\nimport Badge from './Badge';\r\n@inject(allStores => ({\r\n    emailsSent: allStores.clients.emailsSent\r\n}))\r\n@observer\r\nclass Emails extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"emails-sent\">\r\n                <Badge src={\"https://support.apple.com/library/content/dam/edam/applecare/images/en_US/il/ios9-mail-app-icon-left-wrap.png\"} id=\"emails\" />\r\n                <span className=\"number\">{this.props.emailsSent}</span><br />\r\n                <span>Emails Sent</span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Emails;","import React, { Component } from 'react';\r\nimport { observer, inject } from 'mobx-react';\r\nimport Badge from './Badge';\r\n@inject(allStores => ({\r\n    outStandingClients: allStores.clients.outStandingClients\r\n}))\r\n@observer\r\nclass OutStandingClients extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"outstanding\">\r\n                <Badge src=\"http://icons.iconarchive.com/icons/pelfusion/long-shadow-media/256/Contact-icon.png\" />\r\n                <span className=\"number\">{this.props.outStandingClients}</span><br />\r\n                <span>Outstanding Clients</span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default OutStandingClients;","import React, { Component } from 'react';\r\nimport { observer, inject } from 'mobx-react';\r\nimport Badge from './Badge';\r\n\r\n@inject(allStores => ({\r\n    countries: allStores.clients.countries\r\n}))\r\n@observer\r\nclass BestSeller extends Component {\r\n\r\n    bestSeller = () => {\r\n        let countries = Object.keys(this.props.countries);\r\n        let bestSeller = { country: \"\", n: 0 }\r\n        for (let country of countries) {\r\n            if (this.props.countries[country] > bestSeller.n) {\r\n                bestSeller.n = this.props.countries[country];\r\n                bestSeller.country = country\r\n            }\r\n        }\r\n        return bestSeller.country\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Badge src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTpEmb5HCdTTqYquHLosBp6QaC-tnbX1sZXwUovkqu-hOpUlMhz\" />\r\n                <span className=\"number\" >{this.bestSeller()}</span><br />\r\n                <span className=\"description-of-number\">Hottest Country</span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BestSeller;","import React, { Component } from 'react';\r\nimport NewClients from './NewClients'\r\nimport Emails from './Emails';\r\nimport OutstandingClients from './OutstandingClients'\r\nimport BestSeller from './BestSellerCountry';\r\n\r\nclass Badges extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"badges\">\r\n        <NewClients />\r\n        <Emails />\r\n        <OutstandingClients />\r\n        <BestSeller />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Badges;\r\n","import React, { Component } from 'react';\r\nimport { BarChart, CartesianGrid, XAxis, YAxis, Tooltip, Legend, Bar, ResponsiveContainer } from 'recharts';\r\nimport { observer, inject } from 'mobx-react';\r\n\r\n@inject(allStores => ({\r\n    owners: allStores.clients.owners\r\n}))\r\n@observer\r\nclass TopEmployees extends Component {\r\n\r\n    calcTop3 = () => {\r\n        let bestSellers = [];\r\n        let temp = \"\";\r\n        let owners = { ...this.props.owners }\r\n        let names = Object.keys(owners);\r\n        let c = 0;\r\n        while (bestSellers.length < 3) {\r\n            for (let i of names) {\r\n                if (owners[i] > c) {\r\n                    c = owners[i];\r\n                    temp = i;\r\n                }\r\n            }\r\n            bestSellers.push({ name: temp, sales: c });\r\n            c = 0;\r\n            owners[temp] = 0;\r\n            temp = \"\";\r\n        }\r\n        return bestSellers;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"top-employees\">\r\n                <h3>Top Employees</h3>\r\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                    <BarChart data={this.calcTop3()}\r\n                        layout=\"vertical\" margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\r\n                        <CartesianGrid strokeDasharray=\"3 3\" />\r\n                        <XAxis type=\"number\" />\r\n                        <YAxis type=\"category\" dataKey=\"name\" />\r\n                        <Tooltip />\r\n                        <Legend />\r\n                        <Bar dataKey=\"sales\" fill=\"#00035F\" />\r\n                    </BarChart>\r\n                </ResponsiveContainer>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TopEmployees;","import React, { Component } from 'react';\r\nimport { BarChart, CartesianGrid, XAxis, YAxis, Tooltip, Legend, Bar, ResponsiveContainer } from 'recharts';\r\nimport { observer, inject } from 'mobx-react';\r\n\r\n@inject(\"clients\")\r\n@observer\r\nclass SalesBy extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            current: \"Country\"\r\n        }\r\n    }\r\n\r\n    infoBasedDataGen = (info) => {\r\n        let data = [];\r\n        let types = Object.keys(info);\r\n        for (let i of types) {\r\n            data.push({ name: i, sales: info[i] });\r\n        }\r\n        return data;\r\n    }\r\n\r\n    generateFilter = () => {\r\n        let arr = [\"Country\", \"Owner\", \"EmailType\"];\r\n        return arr.map(k => {\r\n            return <option value={k}>{k}</option>\r\n        })\r\n    }\r\n\r\n    calcDataBySales = () => {\r\n        let data = [];\r\n        switch (this.state.current) {\r\n            case \"Country\":\r\n                data = this.infoBasedDataGen(this.props.clients.countries);\r\n                break;\r\n            case \"Owner\":\r\n                data = this.infoBasedDataGen(this.props.clients.owners);\r\n                break;\r\n            case \"EmailType\":\r\n                data = this.infoBasedDataGen(this.props.clients.emailTypeSales);\r\n                break;\r\n        }\r\n        return data;\r\n    }\r\n\r\n    change = (e) => {\r\n        this.setState({ [e.target.id]: e.target.value });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"sales-by\">\r\n                <h3>Sales By:\r\n                    <select id=\"current\" onChange={this.change} selected={this.state.current}>\r\n                        {this.generateFilter()}\r\n                    </select>\r\n                </h3>\r\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                    <BarChart data={this.calcDataBySales()}\r\n                        margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\r\n                        <CartesianGrid strokeDasharray=\"3 3\" />\r\n                        <XAxis type=\"category\" dataKey=\"name\" />\r\n                        <YAxis type=\"number\" />\r\n                        <Tooltip />\r\n                        <Legend  />\r\n                        <Bar dataKey=\"sales\" fill=\"#AF3A9F\" />\r\n                    </BarChart>\r\n                </ResponsiveContainer>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SalesBy;","import React, { Component } from 'react';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\nimport { observer, inject } from 'mobx-react';\r\n\r\n@inject(allStores => ({\r\n    clients: allStores.clients.clients\r\n}))\r\n@observer\r\nclass SalesSince extends Component {\r\n\r\n    calcData = () => {\r\n        let data = [];\r\n        let dataobj = {};\r\n        let today = new Date();\r\n        let startingDate = new Date();\r\n        startingDate.setDate(today.getDate() - 30);\r\n        if (this.props.clients.data) {\r\n            return\r\n        }\r\n        let dates = this.props.clients.filter(c => {\r\n            return new Date(c.firstContact).getTime() >= startingDate.getTime() && c.sold && new Date(c.firstContact).getTime() <= today.getTime();\r\n        }).sort((a, b) => {\r\n            return new Date(a.firstContact).getTime() - new Date(b.firstContact).getTime()\r\n        }).map(c => {\r\n            return { date: new Date(c.firstContact).toLocaleString('en-us', { month: 'short', day: '2-digit' }) };\r\n        })\r\n        for (let i of dates) {\r\n            if (dataobj[i.date]) {\r\n                dataobj[i.date] ++;\r\n            } else {\r\n                dataobj[i.date] = 1;\r\n            }\r\n        }\r\n        for (let i of Object.keys(dataobj)) {\r\n            data.push({ date: i, sales: dataobj[i] });\r\n        }\r\n        return data;\r\n    }\r\n\r\n    calcDate = () => {\r\n        let today = new Date();\r\n        today.setDate(today.getDate() - 30);\r\n        return today.toLocaleString('us-en', { month: \"short\", day: \"2-digit\" });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"sales-since\">\r\n                <h3>Sales Since {this.calcDate()}</h3>\r\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                    <LineChart data={this.calcData()} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\r\n                        <XAxis dataKey=\"date\" />\r\n                        <YAxis />\r\n                        <CartesianGrid strokeDasharray=\"3 3\" />\r\n                        <Tooltip />\r\n                        <Legend />\r\n                        <Line type=\"monotone\" dataKey=\"sales\" stroke=\"#C14A24\" activeDot={{ r: 8 }} />\r\n                    </LineChart>\r\n                </ResponsiveContainer>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SalesSince;","import React, { Component } from 'react';\r\nimport TopEmployees from './TopEmployees'\r\nimport SalesBy from './SalesBy'\r\nimport SalesSince from './SalesSince';\r\n\r\nclass Charts extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"charts\">\r\n          <TopEmployees />\r\n          <SalesBy />\r\n          <SalesSince />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Charts;\r\n","import React, { Component } from 'react';\r\nimport Badges from './Badges'\r\nimport Charts from './Charts'\r\nimport { inject, observer } from 'mobx-react';\r\n\r\n@inject('clients')\r\n@observer\r\nclass Analytics extends Component {\r\n\r\n  componentWillMount() {\r\n    this.props.clients.populateClients(null, null, false, false, true);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"main\">\r\n        <Badges />\r\n        <Charts />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Analytics;\r\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom'\nimport Clients from './components/Clients'\nimport Action from './components/Actions';\nimport Analytics from './components/Analytics'\nimport './App.css';\n\n\nclass Main extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"main\">\n          <ul className=\"nav\">\n            <li><Link to='/Clients' >Clients</Link></li>\n            <li><Link to='/Actions' >Actions</Link></li>\n            <li><Link to='/Analytics' >Analytics</Link></li>\n          </ul>\n          <Route exact path='/Clients' component={Clients} />\n          <Route exact path='/Actions' component={Action} />\n          <Route exact path='/Analytics' component={Analytics} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default Main;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { observable, action } from 'mobx'\r\nimport axios from 'axios'\r\n// import io from 'socket.io-client'\r\n\r\nclass Clients {\r\n    @observable clients = [];\r\n\r\n    // socket = io.connect();\r\n\r\n    @observable client = {};\r\n\r\n    @observable owners = {};\r\n\r\n    @observable emailTypes = {};\r\n\r\n    @observable filteredClients = [];\r\n\r\n    @observable displayedClients = [];\r\n\r\n    @observable newClientsCounter = 0;\r\n\r\n    @observable emailsSent = 0;\r\n\r\n    @observable outStandingClients = 0;\r\n\r\n    @observable countries = {};\r\n\r\n    @observable emailTypeSales = {};\r\n\r\n    @action populateClients = async (min, max, isClientsComponent, isActionComponent, isAnalyticsComponent) => {\r\n        this.clients = await axios.get('/stuff/clients')\r\n        this.clients = this.clients.data\r\n        if (isClientsComponent) {\r\n            this.applyFilter(\"name\", \"\");\r\n            this.populateDisplayed(min, max);\r\n        }\r\n        if (isActionComponent) {\r\n            this.calculateOwners();\r\n            this.calculateEmailTypes();\r\n        }\r\n        if (isAnalyticsComponent) {\r\n            this.calcNewClients();\r\n            this.calcEmailsSent();\r\n            this.calcOutStanding();\r\n            this.calcCountrySales();\r\n            this.calculateOwners();\r\n            this.calcEmailTypeSales();\r\n        };\r\n    }\r\n\r\n    @action applyFilter = (category, input) => {\r\n        debugger;\r\n        if (category === \"sold\") return this.filteredClients = this.clients.filter(c => c.sold && c.name.toLowerCase().includes(input.toLowerCase()));\r\n        if (category === \"email\") {\r\n            return this.filteredClients = this.clients.filter(c => {\r\n                if (c.emailType) {\r\n                    return c.emailType.toLowerCase().includes(input.toLowerCase())\r\n                }\r\n                return false;\r\n            });\r\n        }\r\n        this.filteredClients = this.clients.filter(c => {\r\n            return c[category].toLowerCase().includes(input.toLowerCase());\r\n        })\r\n    }\r\n\r\n    @action calcCountrySales = () => {\r\n        for (let i = 0; i < this.clients.length; i++) {\r\n            if (this.clients[i].sold) {\r\n                if (!this.countries[this.clients[i].country]) {\r\n                    this.countries[this.clients[i].country] = 0;\r\n                }\r\n                this.countries[this.clients[i].country]++\r\n            }\r\n        }\r\n    }\r\n\r\n    @action calcEmailTypeSales = () => {\r\n        for (let i = 0; i < this.clients.length; i++) {\r\n            if (this.clients[i].sold && this.clients[i].emailType !== null) {\r\n                if (!this.emailTypeSales[this.clients[i].emailType]) {\r\n                    this.emailTypeSales[this.clients[i].emailType] = 0;\r\n                }\r\n                this.emailTypeSales[this.clients[i].emailType]++\r\n            }\r\n        }\r\n    }\r\n\r\n    @action calcOutStanding = () => {\r\n        this.outStandingClients = this.clients.filter(c => !c.sold).length;\r\n    }\r\n\r\n    @action calcNewClients = () => {\r\n        let counter = 0;\r\n        let date = new Date();\r\n        let currentMonth = date.getMonth();\r\n        this.clients.map(c => {\r\n            let cDate = new Date(c.firstContact);\r\n            if (cDate.getMonth() === currentMonth) {\r\n                counter++;\r\n            }\r\n            return null;\r\n        });\r\n        this.newClientsCounter = counter;\r\n    }\r\n\r\n    @action calcEmailsSent = () => {\r\n        this.emailsSent = this.clients.filter(c => c.emailType !== null).length;\r\n    }\r\n\r\n    @action calculateOwners = () => {\r\n        let ownersKeys = Object.keys(this.owners);\r\n        if (ownersKeys.length) {\r\n            this.owners = {};\r\n        }\r\n        for (let i = 0; i < this.clients.length; i++) {\r\n            if (this.clients[i].sold) {\r\n                if (!this.owners[this.clients[i].owner]) {\r\n                    this.owners[this.clients[i].owner] = 1;\r\n                } else {\r\n                    this.owners[this.clients[i].owner]++;\r\n                }\r\n            } else if (!this.owners[this.clients[i].owner]) {\r\n                this.owners[this.clients[i].owner] = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    @action calculateEmailTypes = () => {\r\n        let emailTypesKeys = Object.keys(this.owners);\r\n        if (emailTypesKeys.length) {\r\n            // for(let i of ownersKeys) {\r\n            //     delete this.owners[i];\r\n            // }\r\n            this.emailTypes = {};\r\n        }\r\n        for (let i = 0; i < this.clients.length; i++) {\r\n            if (this.clients[i].emailType !== null) {\r\n                if (!this.emailTypes[this.clients[i].emailType]) {\r\n                    this.emailTypes[this.clients[i].emailType] = 1;\r\n                } else {\r\n                    this.emailTypes[this.clients[i].emailType]++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    @action populateDisplayed = (min, max) => {\r\n        // this.socket.emit('texts', min)\r\n        this.displayedClients.splice(0);\r\n        for (let i = min; i < max; i++) {\r\n            if (this.filteredClients[i]) {\r\n                this.displayedClients.push(this.filteredClients[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    @action selectClient = (client) => {\r\n        this.client = client;\r\n    }\r\n\r\n    @action transfer = async (newOwner) => {\r\n        let index = this.clients.indexOf(this.client)\r\n        this.clients[index] = await axios.post('/stuff/newOwner', { newOwner: newOwner, id: this.client.id });\r\n        this.clients[index] = this.clients[index].data\r\n        this.client = this.clients[index]\r\n    }\r\n\r\n    @action send = async (newEmailType) => {\r\n        let index = this.clients.indexOf(this.client)\r\n        this.clients[index] = await axios.post('/stuff/newEmailType', { newEmailType: newEmailType, id: this.client.id });\r\n        this.clients[index] = this.clients[index].data\r\n        this.client = this.clients[index]\r\n    }\r\n\r\n    @action switchSale = async () => {\r\n        let newBool = undefined;\r\n        switch (this.client.sold) {\r\n            case true:\r\n                newBool = false;\r\n                break;\r\n            case false:\r\n                newBool = true;\r\n                break;\r\n        }\r\n        let index = this.clients.indexOf(this.client)\r\n        this.clients[index] = await axios.post('/stuff/sale', { newBool: newBool, id: this.client.id });\r\n        this.clients[index] = this.clients[index].data\r\n        this.client = this.clients[index]\r\n    }\r\n\r\n    @action editClient = async (index, changes, min, max) => {\r\n        changes.id = this.clients[index].id\r\n        this.clients[index] = await axios.post('/stuff/qedit', changes);\r\n        this.clients[index] = this.clients[index].data\r\n        this.populateDisplayed(min, max)\r\n    }\r\n\r\n    @action addNewClient = async (name, surname, country, owner) => {\r\n        let newEmail = name + surname + \"@imant.com\"\r\n        let newClient = {\r\n            name: name + \" \" + surname,\r\n            email: newEmail.toLowerCase(),\r\n            owner: owner,\r\n            country: country\r\n        };\r\n        this.clients = await axios.post('/stuff/new', newClient);\r\n        this.clients = this.clients.data;\r\n    }\r\n}\r\n\r\nconst clients = new Clients();\r\n\r\nexport default clients;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './Main';\nimport * as serviceWorker from './serviceWorker';\nimport clients from './js/clients'\nimport { Provider } from 'mobx-react';\n\nReactDOM.render(\n    <Provider clients={clients}>\n        <Main />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}